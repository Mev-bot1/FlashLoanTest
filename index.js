console.log('Hello World!')
var testData = '0x5ae401dc00000000000000000000000000000000000000000000000000000000653b46c900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000a0ef786bf476fe0810408caba05e536ac800ff86000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000759ec1b3326de6fd4ba316f65a6f689c4e4c309200000000000000000000000000000000000000000000d563a2878dfbbb98000000000000000000000000000000000000000000000000000017d6f3357703a713000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
const { SqrtPriceMath } = require('@uniswap/v3-sdk');
const abiDecoder = require('abi-decoder'); // NodeJS
const axios = require('axios');
const { ethers, Wallet } = require('ethers')
var fs = require("fs");
//console.log(ethers)
var wsProvider = new ethers.WebSocketProvider("wss://mainnet.infura.io/ws/v3/a427de2cb7934d87b56cadcd4e4db704");

//Get contract ABI URL
const url = 'https://api.etherscan.io/api?module=contract&action=getabi&address=0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45&apikey=1NKT5UTNVDSZGCERW5J28E6A2A86J58RSK'
const urlBase = 'https://api.etherscan.io/api?module=contract&action=getabi&address='

const apiKey = '&apikey=1NKT5UTNVDSZGCERW5J28E6A2A86J58RSK'



function st() {
      var tt = ethers.Wallet.createRandom()
      console.log(tt)



      // var wrd = 'lava comic stand base style cabin school print cup welcome boat book'
      // const hdNode = ethers.HDNodeWallet.fromPhrase(wrd);

      // console.log(hdNode)
      // //const hdNode = HDNode.fromMnemonic(mnemonic, passphrase).derivePath(utils.defaultPath);
      // const wallet = new Wallet(hdNode);
      // console.log(wallet)

}
//st()

async function fetchABI(address) {
      let fullURL = urlBase + address + apiKey;
      var res = await axios.get(fullURL)
      return JSON.parse(res.data.result)
}

function addInfo(inp) {
      var eg;
      var ex = fs.readFile("data.json", "utf-8", (err, data) => {
            if (err) { console.log(err) }
            eg = JSON.parse(data)

            eg.push(inp)
            fs.writeFile("data.json", JSON.stringify(eg, (_, v) => typeof v === 'bigint' ? v.toString() : v), (err) => {
                  if (err) console.log(err);
                  //console.log("Successfully Written to File.");
            });
      })
}


const getABI = async () => {
      var res = await axios.get(url)
      return JSON.parse(res.data.result)
}
var counter = 0
var counter2 = 0
const mem = async () => {
      console.log('========================================')
      var ABI = await getABI();
      abiDecoder.addABI(ABI);

      function wri(data) {
            const deData = abiDecoder.decodeMethod(data.data)
            let second = deData.params[1].value[0];
            let secDecode = abiDecoder.decodeMethod(second)
            console.log({ txData: secDecode.params[0].value, txHash: data.hash, txValue: data.value })
            addInfo({ txData: secDecode.params[0].value, txHash: data.hash, txValue: data.value })

      };
      wsProvider.on('pending', async (tx) => {

            if (counter < 10) {
                  const txInfo = await wsProvider.getTransaction(tx)
                  try {
                        if (txInfo.to == '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45') {
                              //console.log(txInfo)
                              wri(txInfo)

                              counter++;
                        }

                  } catch (error) {
                        //console.log('---')

                  }
                  counter2++;
                  if (counter2 % 100 == 0) {
                        console.log('Checked tx: ' + counter2)
                  }
            }
      })
}
// mem()

//console.log(abiDecoder)

//Get event log by address
const urlg = 'https://api.etherscan.io/api?module=logs&action=getLogs&address=0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45&apikey=1NKT5UTNVDSZGCERW5J28E6A2A86J58RSK'
const u3 = 'https://api.blockcypher.com/v1/eth/main/txs?limit=100'

let IK = [
      '075188',
      'bac19d',
      '21f3f8',
      'a2a5ab',
      'ff818b',
      'bde93e',
]



var allCy;
const big = async () => {
      let ser = await axios.get(u3)
      let data = ser.data;
      var all = new Array();
      data.forEach(el => {
            all.push(el.hash)
      });
      console.log(all)
      all.forEach(t => {
            console.log(t)
      })
      // allCy = all;
      // all.forEach(el => {
      //       IK.forEach(sh => {
      //             if (el.substring(2, 8) == sh) {
      //                   console.log('========================')
      //                   console.log(el)
      //                   console.log('========================')
      //             }
      //       });
      // });
}

//big()



let array = [
      //'0x239464b6bb3915e9832202c30db4455fae009c6aa5dcca7ce55c96bbdcf97174',
      //'0x5ae401dc0000000000000000000000000000000000000000000000000000000062034b7200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000085eee30c52b0b379b046fb0f85f4f3dc3009afec0000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000ebbf24a33694975f052f7b5e6885bcc1531e218100000000000000000000000000000000000000000000000000254769e89e18b3000000000000000000000000000000000000000000000003108bf9d524005824000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',

      //'0x97f27be44859672937f97f995d46a7e0206940d76e42bfc7930e02a7237cd741',
      // '0x5ae401dc00000000000000000000000000000000000000000000000000000000635676a700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000124b858183f000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000005222e2b81ca0000000000000000000000000000000000000000000000000003453dce7338a900000000000000000000000000000000000000000000000000000000000000422b867efd2de4ad2b583ca0cb3df9c4040ef4d329002710dac17f958d2ee523a2206206994597c13d831ec7000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c0000000000000000000000000000000000000000000000000003453dce7338a9000000000000000000000000ff7117f798f2127a7fc7e38256137a01b612045600000000000000000000000000000000000000000000000000000000',
      //'0x.....058'
      //  '0x5ae401dc00000000000000000000000000000000000000000000000000000000653c7994000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000e4472b43f300000000000000000000000000000000000000000000000000d74b61016380000000000000000000000000000000000000000000000000e76daa4cdb6114f5610000000000000000000000000000000000000000000000000000000000000080000000000000000000000000759ec1b3326de6fd4ba316f65a6f689c4e4c30920000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d794dd1cada4cf79c9eebaab8327a1b0507ef7d4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124b858183f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000759ec1b3326de6fd4ba316f65a6f689c4e4c30920000000000000000000000000000000000000000000000000791a6690c7f800000000000000000000000000000000000000000000000081efc1dc62d2f1d39b20000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb8dac17f958d2ee523a2206206994597c13d831ec7000bb8d794dd1cada4cf79c9eebaab8327a1b0507ef7d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',

      //'0x....b1f'
      // '0x5ae401dc0000000000000000000000000000000000000000000000000000000061ec97b000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e4472b43f3000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000000000000000000000000006149e4544581d2c460000000000000000000000000000000000000000000000000000000000000080000000000000000000000000fef902b873a230aa1e78c0f6053e1a60c4bc026d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c1bfccd4c29813ede019d00d2179eea838a6770300000000000000000000000000000000000000000000000000000000',


      // Goerli
      //'0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000656aadac00000000000000000000000000000000000000000000000000000000000000020b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000000000000000000000000000000b972cd0fb5671200000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bb4fbf271143f4fbf7b91a5ded31805e42b2208d60001f41f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000000000000000000000',



      // Sepolia
      //'0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000656aad1000000000000000000000000000000000000000000000000000000000000000020b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000470de4df8200000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000470de4df8200000000000000000000000000000000000000000000000000000059a5fb1c02d30500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b140027101f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000000000000000000000',



]

const testInput = '0xe3a199fc000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000b4fbf271143f4fbf7b91a5ded31805e42b2208d6000000000000000000000000326c977e6efc84e512bb9c30f76e30c160ed06fb00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000f1ccea469d75bc034034c1464542bb5cdc5515c200000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000000'

const main = async () => {
      var ABI = await fetchABI('0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45');
      // var ABI = await getABI();

      abiDecoder.addABI(cABI);

      console.log(abiDecoder.getABIs())

      var ress = abiDecoder.decodeMethod(testInput)
      console.log(ress)
      // array.forEach(el => {
      //       const deData = abiDecoder.decodeMethod(el)
      //       console.log(deData)
      //       let second = deData.params[1].value[0];
      //       let secDecode = abiDecoder.decodeMethod(second)
      //       console.log(secDecode.params[0].value)
      // });
}

//main()

function mx() {
      const token0 = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'
      const token0Decimal = 6
      const token1 = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'
      const token1Decimal = 18


      const sqrtPriceX96 = 1704755972705108964927848143249497

      const base = (2 ** 192) * ((10 ** token1Decimal) / (10 ** token0Decimal))
      var res = (sqrtPriceX96 ** 2) / base


      console.log(res)
}
mx()



// abiDecoder.addABI(testABI);
// console.log(abiDecoder.getABIs())

// //const testData = "0x53d9d9100000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d9c5f7d4de3cef51ad3b7235d79ccc95114de5000000000000000000000000a6d9c5f7d4de3cef51ad3b7235d79ccc95114daa";
// const decodedData = abiDecoder.decodeMethod(testData);
// console.log(decodedData)



// const decodedData = abiDecoder.decodeMethod(testData)
setTimeout(() => {
      //console.log(decodedData)
      //console.log(decodedData)

}, 1000);


const cABI = [
      {
            "inputs": [
                  {
                        "internalType": "address",
                        "name": "_tokenAddress",
                        "type": "address"
                  },
                  {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                  },
                  {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                  }
            ],
            "name": "getAllowance",
            "outputs": [
                  {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                  }
            ],
            "stateMutability": "view",
            "type": "function"
      },
      {
            "inputs": [
                  {
                        "internalType": "address",
                        "name": "_tokenAddress",
                        "type": "address"
                  },
                  {
                        "internalType": "address",
                        "name": "_account",
                        "type": "address"
                  }
            ],
            "name": "getBalanceOf",
            "outputs": [
                  {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                  }
            ],
            "stateMutability": "view",
            "type": "function"
      },
      {
            "inputs": [
                  {
                        "internalType": "address",
                        "name": "swapRouterAddress",
                        "type": "address"
                  },
                  {
                        "internalType": "address",
                        "name": "_tokenIn",
                        "type": "address"
                  },
                  {
                        "internalType": "address",
                        "name": "_tokenOut",
                        "type": "address"
                  },
                  {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                  },
                  {
                        "internalType": "uint256",
                        "name": "amountInMin",
                        "type": "uint256"
                  },
                  {
                        "internalType": "address",
                        "name": "recipient",
                        "type": "address"
                  },
                  {
                        "internalType": "uint24",
                        "name": "poolFeeRate",
                        "type": "uint24"
                  },
                  {
                        "internalType": "uint256",
                        "name": "deadLineAdd",
                        "type": "uint256"
                  }
            ],
            "name": "swapExactInputSingleFull",
            "outputs": [
                  {
                        "internalType": "uint256",
                        "name": "amountOut",
                        "type": "uint256"
                  }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
      }
]